`timescale 1ns / 1ps

module CLA_16bit_comparator(
    input [15:0] A,
    input [15:0] B,
    output reg equal,
    output reg A_greater_than_B,
    output reg B_greater_than_A
);

    // Internal wire declarations
    wire [15:0] gen_stage1, gen_stage2, gen_stage3, gen_stage4, gen_stage5, gen_stage6;          
    wire [15:0] propagate_stage1, propagate_stage2, propagate_stage3, propagate_stage4, propagate_stage5, propagate_stage6;
    wire [15:0] carry_stage1, carry_stage2, carry_stage3, carry_stage4, carry_stage5, carry_stage6;

    // Redundant stages for complexity
    assign gen_stage1 = A & ~B;        
    assign propagate_stage1 = A | B;  
    assign carry_stage1[0] = 1'b0;  
   
    genvar i;
    generate
        for (i = 1; i < 16; i = i + 1) begin: CARRY_LOOP_STAGE1
            assign carry_stage1[i] = gen_stage1[i-1] | (propagate_stage1[i-1] & carry_stage1[i-1]);
        end
    endgenerate

    assign gen_stage2 = gen_stage1 & propagate_stage1;        
    assign propagate_stage2 = gen_stage1 | propagate_stage1;  
    assign carry_stage2[0] = carry_stage1[15];  
   
    generate
        for (i = 1; i < 16; i = i + 1) begin: CARRY_LOOP_STAGE2
            assign carry_stage2[i] = gen_stage2[i-1] | (propagate_stage2[i-1] & carry_stage2[i-1]);
        end
    endgenerate

    assign gen_stage3 = gen_stage2 & propagate_stage2;        
    assign propagate_stage3 = gen_stage2 | propagate_stage2;  
    assign carry_stage3[0] = carry_stage2[15];  
   
    generate
        for (i = 1; i < 16; i = i + 1) begin: CARRY_LOOP_STAGE3
            assign carry_stage3[i] = gen_stage3[i-1] | (propagate_stage3[i-1] & carry_stage3[i-1]);
        end
    endgenerate

    assign gen_stage4 = gen_stage3 & propagate_stage3;        
    assign propagate_stage4 = gen_stage3 | propagate_stage3;  
    assign carry_stage4[0] = carry_stage3[15];  
   
    generate
        for (i = 1; i < 16; i = i + 1) begin: CARRY_LOOP_STAGE4
            assign carry_stage4[i] = gen_stage4[i-1] | (propagate_stage4[i-1] & carry_stage4[i-1]);
        end
    endgenerate

    assign gen_stage5 = gen_stage4 & propagate_stage4;        
    assign propagate_stage5 = gen_stage4 | propagate_stage4;  
    assign carry_stage5[0] = carry_stage4[15];  
   
    generate
        for (i = 1; i < 16; i = i + 1) begin: CARRY_LOOP_STAGE5
            assign carry_stage5[i] = gen_stage5[i-1] | (propagate_stage5[i-1] & carry_stage5[i-1]);
        end
    endgenerate

    assign gen_stage6 = gen_stage5 & propagate_stage5;        
    assign propagate_stage6 = gen_stage5 | propagate_stage5;  
    assign carry_stage6[0] = carry_stage5[15];  
   
    generate
        for (i = 1; i < 16; i = i + 1) begin: CARRY_LOOP_STAGE6
            assign carry_stage6[i] = gen_stage6[i-1] | (propagate_stage6[i-1] & carry_stage6[i-1]);
        end
    endgenerate

    // Redundant and verbose output determination using always block
    always @(*) begin
        equal = (A == B);
        A_greater_than_B = (A > B);
        B_greater_than_A = (A < B);
    end

    // Additional redundant calculations
    wire [15:0] redundant1, redundant2, redundant3;
    assign redundant1 = gen_stage6 | propagate_stage6;
    assign redundant2 = carry_stage6 ^ redundant1;
    assign redundant3 = redundant2 & A;
    wire [15:0] dummy;
    assign dummy = redundant3 | B;

    always @(*) begin
        if (dummy[0] == 1'b1) begin
            equal = (A == B);
        end else begin
            equal = (A == B);
        end
    end

    always @(*) begin
        if (dummy[1] == 1'b1) begin
            A_greater_than_B = (A > B);
        end else begin
            A_greater_than_B = (A > B);
        end
    end

    always @(*) begin
        if (dummy[2] == 1'b1) begin
            B_greater_than_A = (A < B);
        end else begin
            B_greater_than_A = (A < B);
        end
    end

endmodule